[
  {
    "objectID": "decision-theory/numerical_fredholm_integral.html",
    "href": "decision-theory/numerical_fredholm_integral.html",
    "title": "Introduction",
    "section": "",
    "text": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom numpy.polynomial.laguerre import laggauss\nfrom numpy import linalg\nfrom scipy.stats import norm\nWe want to solve a Fredholm integral equation of the second kind, of the form:\n\\(u(x) = \\int_{0}^{\\infty} K(x, t) u(t) dt + f(x)\\)\nWeâ€™ll approach it by using Gauss-Laguerre quadrature to approximate the integral (note that we have to insert \\(\\exp(t)\\) to cancel the implicit \\(\\exp(-t)\\) weighting function of the G-L quadrature.):\n\\(u(x) \\approx \\sum_{j=1}^{n} w_j \\exp(t_j) K(x, t_j) u(t_j) + f(x)\\)\nIf we evaluate \\(u\\) at the quadrature points (\\(u_i = u(x_i)\\)), we get a linear system:\n\\(u_i \\approx \\sum_{j=1}^{n} w_j \\exp(x_j) K(x_i, x_j) u_j + f(x_i)\\)\nIn matrix form, we have:\n\\(A \\vec{u} = \\vec{b}\\)\n\\(A_{i,j} = \\delta_{i,j} - w_j exp(x_j) K(x_i, x_j)\\)\n\\(b_i = f(x_i)\\)\nWe can solve this for \\(\\vec{u}\\). Then to get the continuous function \\(u(x)\\), we can substitute \\(\\vec{u}\\) into the right-hand side of the approximation above:\n\\(u(x) \\approx \\sum_{j=1}^{n} w_j \\exp(t_j) K(x, t_j) u_j + f(x)\\)\ndef solve_fredholm(k, f, n):\n    x, w = laggauss(n)\n    A = np.eye(n) - w * np.exp(x) * k(x[:,None], x)\n    b = f(x)\n    u = linalg.solve(A, b)\n    def soln(y):\n        return np.dot(w * np.exp(x) * k(y[:,None], x), u) + f(y)\n    return soln\ndef k(mu, sigma):\n    return lambda x, t: norm(loc=mu, scale=sigma).pdf(t - x)\n\ndef f_nt(mu, sigma):\n    return norm(loc=-mu, scale=sigma).sf\n\ndef f_t():\n    return np.ones_like\nAs we increase the number of nodes, we approach the asymptotic behavior (in \\(x\\)) that we expect from theory.\nmu = 1\nsigma = 1\n\nxmax = 5\nx = np.arange(0, xmax, 0.01)\n\nfor n in [5, 10, 20]:\n    plt.plot(x, solve_fredholm(k(-mu, sigma), f_t(), n)(x), label = f\"n = {n}\")\nplt.plot(x, x / mu + 1, 'k--', label=\"asymptotic theory\")\nplt.legend(frameon=False)\nplt.xlabel(r\"$x$\")\nplt.ylabel(r\"$u_T(x)$\")\nplt.show()\n\nfor n in [5, 10, 20]:\n    plt.semilogy(x, solve_fredholm(k(mu, sigma), f_nt(mu, sigma), n)(x), label = f\"n = {n}\")\nplt.plot(x, norm.cdf(-mu/sigma) * np.exp(-2 * mu * x / sigma**2), 'k--', label=\"asymptotic theory\")\nplt.legend(frameon=False)\nplt.xlabel(r\"$x$\")\nplt.ylabel(r\"$u_{NT}(x)$\")\nplt.show()"
  },
  {
    "objectID": "decision-theory/numerical_fredholm_integral.html#scaling-diagrams",
    "href": "decision-theory/numerical_fredholm_integral.html#scaling-diagrams",
    "title": "Introduction",
    "section": "Scaling diagrams",
    "text": "Scaling diagrams\n\nn = 185\nsigma = 1\n\n\nThreat, \\(|\\mu / \\sigma| \\ge 1\\)\n\nxmax = 32\nx = np.arange(0, xmax, 0.01)\n\nfor mu in [-1, -2, -4, -8]:\n    soln = solve_fredholm(k(mu, sigma), f_t(), n)\n    plt.plot(x / (-mu), soln(x), label=mu)\nplt.plot(x, x + 0.5, 'k')\nplt.xlim([0, 4])\nplt.ylim([0, 5])\nplt.xlabel(r\"$x / (-\\mu)$\")\nplt.ylabel(r\"$u(x)$\")\nplt.legend()\n\n&lt;matplotlib.legend.Legend at 0x126fa1f90&gt;\n\n\n\n\n\n\nxmax = 16\nx = np.arange(0, xmax, 0.01)\n\nplt.figure(figsize=(3,2))\nfor mu in [-4, -8]:\n    soln = solve_fredholm(k(mu, sigma), f_t(), n)\n    plt.plot(x, soln(x), label=r\"$\\tau = $\" + f\"{-2 * mu}\")\nplt.xlim([0, xmax])\nplt.ylim([0, 5])\nplt.xlabel(r\"$x$\")\nplt.ylabel(r\"$u_T(x)$\")\nplt.legend(frameon=False)\nplt.savefig(\"large_updates.png\", bbox_inches=\"tight\")\n\n\n\n\n\n\nNon-threat, \\(|\\mu / \\sigma| \\ge 1\\)\nOne term from the Liouville-Neumann series:\n\nfor mu in [1, 2, 3, 4]:\n    xmax = 2*mu\n    x = np.arange(0, xmax, 0.01)\n\n    soln = solve_fredholm(k(mu, sigma), f_nt(mu, sigma), n)\n    plt.semilogy(x / mu, soln(x), label=mu)\n    plt.semilogy(x / mu, norm.cdf(-(x+mu)/sigma))\n    plt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\nMultiple terms from the Liouville-Neumann series:\n\nfor mu in [1, 2, 3, 4]:\n    xmax = 2*mu\n    x = np.arange(0, xmax, 0.01)\n\n    soln = solve_fredholm(k(mu, sigma), f_nt(mu, sigma), n)\n    approx = np.zeros_like(x)\n    for j in range(1, 4):\n        approx += norm.cdf(-(x + j * mu)/(np.sqrt(j) * sigma))\n    plt.semilogy(x / mu, soln(x), label=mu)\n    plt.semilogy(x / mu, approx)\n    plt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNon-threat, \\(|\\mu / \\sigma| \\leq 1\\)\n\nxmax = 32\nx = np.arange(0, xmax, 0.01)\n\nfor mu in [1/8, 1/4, 1/2, 1]:\n    soln = solve_fredholm(k(mu, sigma), f_nt(mu, sigma), n)\n    plt.semilogy(2 * mu * x / sigma**2, soln(x), label=mu)\nplt.semilogy(x, np.exp(- x), 'k')\nplt.xlim([0, 8])\nplt.ylim([1e-4,1])\nplt.xlabel(r\"$2 \\mu x / \\sigma^2$\")\nplt.ylabel(r\"$u(x)$\")\nplt.legend()\n\n&lt;matplotlib.legend.Legend at 0x126fbac10&gt;\n\n\n\n\n\nTesting the hypothesis that \\(u_{NT}(0) \\sim \\frac{1}{1 + \\sqrt{\\tau/2}}\\) for \\(\\tau \\to 0\\).\n\nplt.subplot(211)\nfor mu in np.logspace(-1.5, 0, 20):\n    soln = solve_fredholm(k(mu, sigma), f_nt(mu, sigma), n)\n    plt.loglog(mu, 1 - soln(np.zeros(1)), '.k')\n    plt.loglog(mu, 1 - 1 / (1 + np.sqrt(2)*mu / sigma), 'xk')\nplt.ylabel(r\"$1 - u_{NT}(0)$\")\n\nplt.subplot(212)\nfor mu in np.logspace(-1.5, 0, 20):\n    soln = solve_fredholm(k(mu, sigma), f_nt(mu, sigma), n)\n    plt.semilogx(mu, soln(np.zeros(1)), '.k')\n    plt.semilogx(mu, 1 / (1 + np.sqrt(2)*mu / sigma), 'xk')\n\nplt.xlabel(r\"$\\mu / \\sigma = \\sqrt{\\tau}/2$\")\nplt.ylabel(r\"$u_{NT}(0)$\")\nplt.ylim([0,1])\n\n(0.0, 1.0)\n\n\n\n\n\n\n\nThreat, \\(|\\mu / \\sigma| \\le 1\\)\n\nxmax = 32\nx = np.arange(0, xmax, 0.01)\n\nfor mu in [-1/16, -1/8, -1/4, -1/2, -1]:\n    soln = solve_fredholm(k(mu, sigma), f_t(), n)\n    plt.plot(x / sigma, soln(x) * (-mu / sigma), label=r\"$\\tau = $\" + f\"{-2*mu}\")\nplt.plot(x, x + 0.5, 'k')\nplt.xlim([0, 4])\nplt.ylim([0, 5])\nplt.xlabel(r\"$x / \\sqrt{\\tau}$\")\nplt.ylabel(r\"$\\frac{\\sqrt{\\tau}}{2} u(x)$\")\nplt.legend()\n\n&lt;matplotlib.legend.Legend at 0x130102910&gt;\n\n\n\n\n\n\nxmax = 32\nx = np.arange(0, xmax, 0.01)\n\nfig = plt.figure(figsize=(5.5,2.5))\n\nax = plt.subplot(122)\nfor mu in [-1/8, -1/4, -1/2, -1]:\n    soln = solve_fredholm(k(mu, sigma), f_t(), n)\n    plt.plot(x / sigma, soln(x) * (-mu / sigma), label=f\"{-2*mu}\")\nplt.plot(x, x + 0.5, 'k')\nplt.xlim([0, 4])\nplt.ylim([0, 5])\nplt.xlabel(r\"$x / \\sqrt{\\tau}$\")\nplt.ylabel(r\"$\\frac{\\sqrt{\\tau}}{2} u_{T}(x)$\")\nplt.legend(frameon=False, title=r\"$\\tau$\")\n\n\nxmax = 32\nx = np.arange(0, xmax, 0.01)\n\nax = plt.subplot(121)\nfor mu in [1/8, 1/4, 1/2, 1]:\n    soln = solve_fredholm(k(mu, sigma), f_nt(mu, sigma), n)\n    plt.semilogy(2 * mu * x / sigma**2, soln(x), label=mu)\nplt.semilogy(x, np.exp(- x), 'k')\nplt.xlim([0, 8])\nplt.ylim([1e-4,1])\nplt.xlabel(r\"$x$\")\nplt.ylabel(r\"$u_{NT}(x)$\")\n\nfig.tight_layout()\nplt.savefig(\"small_updates.png\", bbox_inches=\"tight\")\n# plt.legend()"
  },
  {
    "objectID": "decision-theory/numerical_fredholm_integral.html#scratch",
    "href": "decision-theory/numerical_fredholm_integral.html#scratch",
    "title": "Introduction",
    "section": "Scratch",
    "text": "Scratch\nAttempts at higher-order approximations, fitting the constants, etc.\n\ndef theory_nt(x, mu, sigma):\n    return (norm.cdf(-mu/sigma) / norm.cdf(mu/sigma)) * np.exp(-2 * mu * x / sigma**2)\n\ndef theory_t(x, mu, sigma):\n    a = 1 + np.abs(sigma/mu) * norm.pdf(np.abs(mu/sigma)) / norm.cdf(np.abs(mu/sigma))\n    return - (1/mu) * x + a\n\n\nmu = -2\nsigma = 1\nn = 185\n\nsoln = solve_fredholm(k(mu, sigma), f_t(), n)\n\nxmax = 6\nx = np.arange(0, xmax, 0.1)\n\nplt.plot(x, soln(x))\nplt.plot(x, theory_t(x, mu, sigma))\n# a = 1 + np.abs(sigma/mu) * norm.pdf(np.abs(mu/sigma)) / norm.cdf(np.abs(mu/sigma))\na = 1/2\nplt.plot(x, 1 - (sigma/mu)*norm.pdf((x+mu)/sigma) + (- (x/mu) + a - 1)*norm.cdf((x+mu)/sigma))\nplt.plot(x[x&lt;=-mu], 1 + norm.cdf((x[x&lt;=-mu]+mu)/sigma), ':', lw=4)\nplt.ylim([0,1 - xmax/mu])\n\n(0.0, 4.0)\n\n\n\n\n\n\ndef a_opt(x):\n    return 1/2 + 1/(2*x) - (1/x)*norm.pdf(1/2 + x/2) / norm.cdf(-(1/2 + x/2))\n\n\nmu = -1/2\nsigma = 1\nn = 185\n\nsoln = solve_fredholm(k(mu, sigma), f_t(), n)\n\nxmax = 8\nx = np.arange(0, xmax, 0.1)\n\na = 1/4\nplt.plot(x, soln(x))\nplt.plot(x, -(x/mu) + a)\nplt.plot(x, 1 - (sigma/mu)*norm.pdf((x+mu)/sigma) + (- (x/mu) + a - 1)*norm.cdf((x+mu)/sigma))\nplt.plot(x[x&lt;=-mu], 1 + norm.cdf((x[x&lt;=-mu]+mu)/sigma), ':', lw=4)\nplt.ylim([0,1 - xmax/mu])\nplt.show()\n\na = a_opt(mu/sigma)\nprint(a)\nprint(-sigma / mu * (norm.pdf(1/2) / norm.cdf(-1/2) - 1/2))\nplt.plot(x, soln(x))\nplt.plot(x, -(x/mu) + a)\nplt.plot(x, 1 - (sigma/mu)*norm.pdf((x+mu)/sigma) + (- (x/mu) + a - 1)*norm.cdf((x+mu)/sigma))\nplt.plot(x[x&lt;=-mu], 1 + norm.cdf((x[x&lt;=-mu]+mu)/sigma), ':', lw=4)\nplt.ylim([0,1 - xmax/mu])\nplt.show()\n\na = 1\nplt.plot(x, soln(x))\nplt.plot(x, -(x/mu) + a)\nplt.plot(x, 1 - (sigma/mu)*norm.pdf((x+mu)/sigma) + (- (x/mu) + a - 1)*norm.cdf((x+mu)/sigma))\nplt.plot(x[x&lt;=-mu], 1 + norm.cdf((x[x&lt;=-mu]+mu)/sigma), ':', lw=4)\nplt.ylim([0,1 - xmax/mu])\nplt.show()\n\n\n\n\n\n1.4271079588328082\n1.2821555407361296\n\n\n\n\n\n\n\n\n\nmu = -8\nsigma = 1\nn = 185\n\nsoln = solve_fredholm(k(mu, sigma), f_t(), n)\n\nxmax = 32\nx = np.arange(0, xmax, 0.1)\n\na = 1/16\nplt.plot(x, soln(x))\nplt.plot(x, -(x/mu) + a)\nplt.plot(x, 1 - (sigma/mu)*norm.pdf((x+mu)/sigma) + (- (x/mu) + a - 1)*norm.cdf((x+mu)/sigma))\nplt.plot(x[x&lt;=-mu], 1 + norm.cdf((x[x&lt;=-mu]+mu)/sigma), ':', lw=4)\nplt.vlines((-mu) / 2, 0, 1 - xmax/mu, 'k', linestyle='dashed')\nplt.ylim([0,1 - xmax/mu])\nplt.show()\n\na = 1/2\nplt.plot(x, soln(x))\nplt.plot(x, -(x/mu) + a)\nplt.plot(x, 1 - (sigma/mu)*norm.pdf((x+mu)/sigma) + (- (x/mu) + a - 1)*norm.cdf((x+mu)/sigma))\nplt.plot(x[x&lt;=-mu], 1 + norm.cdf((x[x&lt;=-mu]+mu)/sigma), ':', lw=4)\nplt.vlines((-mu) / 2, 0, 1 - xmax/mu, 'k', linestyle='dashed')\nplt.ylim([0,1 - xmax/mu])\nplt.show()\n\na = 2\nplt.plot(x, soln(x))\nplt.plot(x, -(x/mu) + a)\nplt.plot(x, 1 - (sigma/mu)*norm.pdf((x+mu)/sigma) + (- (x/mu) + a - 1)*norm.cdf((x+mu)/sigma))\nplt.plot(x[x&lt;=-mu], 1 + norm.cdf((x[x&lt;=-mu]+mu)/sigma), ':', lw=4)\nplt.vlines((-mu) / 2, 0, 1 - xmax/mu, 'k', linestyle='dashed')\nplt.ylim([0,1 - xmax/mu])\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\nmu = -4\nsigma = 1\nn = 185\n\nsoln = solve_fredholm(k(mu, sigma), f_t(), n)\n\nxmax = 12\nx = np.arange(0, xmax, 0.1)\n\na = 1/16\nplt.plot(x, soln(x))\nplt.plot(x, -(x/mu) + a)\nplt.plot(x, 1 - (sigma/mu)*norm.pdf((x+mu)/sigma) + (- (x/mu) + a - 1)*norm.cdf((x+mu)/sigma))\nplt.plot(x[x&lt;=-mu], 1 + norm.cdf((x[x&lt;=-mu]+mu)/sigma), ':', lw=4)\nplt.vlines((-mu) / 2, 0, 1 - xmax/mu, 'k', linestyle='dashed')\nplt.ylim([0,1 - xmax/mu])\nplt.show()\n\na = 1/2\nplt.plot(x, soln(x))\nplt.plot(x, -(x/mu) + a)\nplt.plot(x, 1 - (sigma/mu)*norm.pdf((x+mu)/sigma) + (- (x/mu) + a - 1)*norm.cdf((x+mu)/sigma))\nplt.plot(x[x&lt;=-mu], 1 + norm.cdf((x[x&lt;=-mu]+mu)/sigma), ':', lw=4)\nplt.vlines((-mu) / 2, 0, 1 - xmax/mu, 'k', linestyle='dashed')\nplt.ylim([0,1 - xmax/mu])\nplt.show()\n\na = 2\nplt.plot(x, soln(x))\nplt.plot(x, -(x/mu) + a)\nplt.plot(x, 1 - (sigma/mu)*norm.pdf((x+mu)/sigma) + (- (x/mu) + a - 1)*norm.cdf((x+mu)/sigma))\nplt.plot(x[x&lt;=-mu], 1 + norm.cdf((x[x&lt;=-mu]+mu)/sigma), ':', lw=4)\nplt.vlines((-mu) / 2, 0, 1 - xmax/mu, 'k', linestyle='dashed')\nplt.ylim([0,1 - xmax/mu])\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\nmu = -1/4\nsigma = 1\nn = 185\n\nsoln = solve_fredholm(k(mu, sigma), f_t(), n)\n\nxmax = 4\nx = np.arange(0, xmax, 0.01)\n\na = 1/2\nplt.plot(x, soln(x))\nplt.plot(x, -(x/mu) + a)\nplt.plot(x, 1 - (sigma/mu)*norm.pdf((x+mu)/sigma) + (- (x/mu) + a - 1)*norm.cdf((x+mu)/sigma))\nplt.ylim([0,1 - xmax/mu])\nplt.show()\n\na = 0.641 * sigma / (-mu)\nplt.plot(x, soln(x))\nplt.plot(x, -(x/mu) + a)\nplt.plot(x, 1 - (sigma/mu)*norm.pdf((x+mu)/sigma) + (- (x/mu) + a - 1)*norm.cdf((x+mu)/sigma))\nplt.ylim([0,1 - xmax/mu])\nplt.show()\n\na = 5\nplt.plot(x, soln(x))\nplt.plot(x, -(x/mu) + a)\nplt.plot(x, 1 - (sigma/mu)*norm.pdf((x+mu)/sigma) + (- (x/mu) + a - 1)*norm.cdf((x+mu)/sigma))\nplt.ylim([0,1 - xmax/mu])\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nmu = -1\nsigma = 1\nn = 185\n\nsoln = solve_fredholm(k(mu, sigma), f_t(), n)\n\nxmax = 4\nx = np.arange(0, xmax, 0.01)\n\na = 1/2\nplt.plot(x, soln(x))\nplt.plot(x, -(x/mu) + a)\nplt.plot(x, 1 - (sigma/mu)*norm.pdf((x+mu)/sigma) + (- (x/mu) + a - 1)*norm.cdf((x+mu)/sigma))\nplt.ylim([0,1 - xmax/mu])\nplt.show()\n\na = 0.9\nplt.plot(x, soln(x))\nplt.plot(x, -(x/mu) + a)\nplt.plot(x, 1 - (sigma/mu)*norm.pdf((x+mu)/sigma) + (- (x/mu) + a - 1)*norm.cdf((x+mu)/sigma))\nplt.ylim([0,1 - xmax/mu])\nplt.show()\n\na = 2\nplt.plot(x, soln(x))\nplt.plot(x, -(x/mu) + a)\nplt.plot(x, 1 - (sigma/mu)*norm.pdf((x+mu)/sigma) + (- (x/mu) + a - 1)*norm.cdf((x+mu)/sigma))\nplt.ylim([0,1 - xmax/mu])\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nmu = -4\nsigma = 1\nn = 185\n\nsoln = solve_fredholm(k(mu, sigma), f_t(), n)\n\nxmax = 12\nx = np.arange(0, xmax, 0.1)\n\nplt.plot(x, soln(x))\na = 1/2\nplt.plot(x, -(x/mu) + a)\nplt.plot(x, 1 - (sigma/mu)*norm.pdf((x+mu)/sigma) + (- (x/mu) + a - 1)*norm.cdf((x+mu)/sigma))\nplt.ylim([0,1 - xmax/mu])\n\n(0.0, 4.0)\n\n\n\n\n\n\nxmax = 32\nx = np.arange(0, xmax, 0.01)\n\nfor mu in [1/8, 1/4, 1/2, 1]:\n    a = norm.cdf(-mu / sigma)\n    soln = solve_fredholm(k(mu, sigma), f_nt(mu, sigma), n)\n    plt.semilogy(x, soln(x), label=mu)\n    plt.semilogy(x, a * np.exp(-2 * mu * x / sigma**2))\n    plt.semilogy(x, a * norm.sf(-(x+mu)/sigma) * np.exp(-2 * mu * x / sigma**2) + norm.cdf(-(x+mu)/sigma))\n    # plt.semilogy(x, np.exp(-2 * x), 'k')\n    # plt.xlim([0,4])\n    # plt.ylim([3e-3,1.1])\n    plt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmu = -1/8\nsigma = 1\nn = 185\n\nsoln = solve_fredholm(k(mu, sigma), f_t(), n)\n\nxmax = 4\nx = np.arange(0, xmax, 0.1)\n\nplt.plot(x, soln(x))\na = 2 * np.sqrt(2*np.pi)\nplt.plot(x, -(x/mu) + a)\nplt.plot(x, 1 - (sigma/mu)*norm.pdf((x+mu)/sigma) + (- (x/mu) + a - 1)*norm.cdf((x+mu)/sigma))\nplt.ylim([0,1 - xmax/mu])\n\n(0.0, 33.0)\n\n\n\n\n\n\nnp.sqrt(2*np.pi)\n\n2.5066282746310002\n\n\n\nmu = -1/4\nsigma = 1\nn = 185\n\nsoln = solve_fredholm(k(mu, sigma), f_t(), n)\n\nxmax = 4\nx = np.arange(0, xmax, 0.1)\n\nplt.plot(x, soln(x))\na = np.sqrt(2*np.pi)\nplt.plot(x, -(x/mu) + a)\nplt.plot(x, 1 - (sigma/mu)*norm.pdf((x+mu)/sigma) + (- (x/mu) + a - 1)*norm.cdf((x+mu)/sigma))\nplt.ylim([0,1 - xmax/mu])\n\n(0.0, 17.0)\n\n\n\n\n\n\nmu = -1/2\nsigma = 1\nn = 185\n\nsoln = solve_fredholm(k(mu, sigma), f_t(), n)\n\nxmax = 4\nx = np.arange(0, xmax, 0.1)\n\nplt.plot(x, soln(x))\na = np.sqrt(2*np.pi) / 2\nplt.plot(x, -(x/mu) + a)\nplt.plot(x, 1 - (sigma/mu)*norm.pdf((x+mu)/sigma) + (- (x/mu) + a - 1)*norm.cdf((x+mu)/sigma))\nplt.ylim([0,1 - xmax/mu])\n\n(0.0, 9.0)\n\n\n\n\n\n\nplt.loglog([1/2, 1/4, 1/8], [1, 2, 4], '.')\n\n\n\n\n\nmu = -1/4\nsigma = 1\nn = 185\n\nsoln = solve_fredholm(k(mu, sigma), f_t(), n)\n\nxmax = 16\nx = np.arange(0, xmax, 0.1)\n\nplt.plot(x, soln(x))\nplt.plot(x, theory_t(x, mu, sigma))\nplt.plot(x[x&lt;=-mu], 1 + norm.cdf((x[x&lt;=-mu]+mu)/sigma))\nplt.plot(x[x&gt;=-mu], -x[x&gt;=-mu]/mu + 1/2)\nplt.ylim([0,1 - xmax/mu])\n\n(0.0, 65.0)\n\n\n\n\n\n\nsigma = 1\nn = 185\nxmax = 4\nx = np.arange(0, xmax, 0.1)\n\nfor mu in [-1/2, -1/3, -1/4, -1/5]:\n    soln = solve_fredholm(k(mu, sigma), f_t(), n)\n    mod = soln(x) * -mu - x\n    plt.plot(x, mod - mod[-1])\n    # plt.plot(x, theory_t(x, mu, sigma) * -mu)\n\n\n\n\n\nmu = 2\nsigma = 1\nn = 185\n\nsoln = solve_fredholm(k(mu, sigma), f_nt(mu, sigma), n)\n\nxmax = 10\nx = np.arange(0, xmax, 0.1)\n\nplt.semilogy(x, soln(x))\n# plt.plot(x, 1 + norm.cdf((x+mu)/sigma))\n# plt.plot(x, 1 - x/mu)\nplt.semilogy(x, theory_nt(x, mu, sigma))\nplt.semilogy(x[x&lt;=mu], norm.cdf(-(x[x&lt;=mu]+mu)/sigma))\nplt.semilogy(x[x&gt;mu], np.exp(2*(mu/sigma)**2) * norm.cdf(-2*mu/sigma) * np.exp(-2*mu * x[x&gt;mu] / sigma**2))\n# plt.plot(x, -x/mu + norm.cdf(0))\n# plt.ylim([0,1 - xmax/mu])"
  },
  {
    "objectID": "air-travel/flights.html",
    "href": "air-travel/flights.html",
    "title": "Flights",
    "section": "",
    "text": "For a demonstration of a line plot on a polar axis, see FigureÂ 1.\n\n\nCode\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef integral_global(t, r, n):\n    return (np.exp(r * t) - 1) / (n * r)\n\ndef integral_local(t, r, n, f):\n    return integral_global(t, r, n) - integral_global(t, r - f, n)\n\n\n\n\nCode\nrs = [1 / 250, 1 / 800]\nfs = [1 / 300, 1 / 300]\nn = 10\nt_max = 3200\nt = np.linspace(1, t_max, t_max)\nfig, axes = plt.subplots(1, len(rs), sharey=True)\nfor r, f, ax in zip(rs, fs, axes):\n    ax.semilogy(t, integral_global(t, r, n))\n    ax.semilogy(t, integral_local(t, r, n, f))\naxes[0].set_ylim([1, 1e4])\nplt.show()\n\n\n\n\n\nFigureÂ 1: test\n\n\n\n\n\n\nCode\nr = 1 / 60\nf = 1 / 150\nn = 10\nt_max = 300\nt = np.linspace(1, t_max, t_max)\nfig = plt.figure(figsize=(5,5))\nax = fig.add_subplot()\nax.semilogy(t, integral_global(t, r, n), label=\"Airport\")\nax.semilogy(t, integral_local(t, r, n, f), label=\"WWTP\")\nax.legend(frameon=False)\nylim = [1, 1e3]\nax.set_ylim(ylim)\nax.hlines([50], 0, 300, linestyle=\"dashed\", color=\"grey\")\nax.vlines(133, *ylim, linestyle=\"dotted\", color=\"C0\")\nax.vlines(169, *ylim, linestyle=\"dotted\", color=\"C1\")\nax.set_xlabel(\"Days since start of pandemic\")\nax.set_ylabel(\"Total reads matching virus\")\nax.text(0, 55, \"Detection threshold\", color=\"grey\")\nax.text(131, 1.1, \"Detection\\nin airport\", color=\"C0\", ha=\"right\")\n# ax.text(270, 600, \"Airport reads\", color=\"C0\", ha=\"right\")\nax.text(171, 1.1, \"Detection\\nin WWTP\", color=\"C1\")\n# ax.text(215, 100, \"WWTP reads\", color=\"C1\")\nfor spine in ['top', 'right']:\n    ax.spines[spine].set_visible(False)\nplt.show()\n\n\n\n\n\nFigureÂ 2: test\n\n\n\n\n\n\nCode\nr = 0.259\nf = 1 / 300\nn = 1e8\nt_max = 300\nt = np.linspace(1, t_max, t_max)\nfig = plt.figure(figsize=(5,5))\nax = fig.add_subplot()\nax.semilogy(t, integral_global(t, r, n), label=\"Airport\")\nax.semilogy(t, integral_local(t, r, n, f), label=\"WWTP\")\nax.legend(frameon=False)\n# ylim = [1, 1e3]\n# ax.set_ylim(ylim)\nax.hlines([50], 0, 300, linestyle=\"dashed\", color=\"grey\")\nax.vlines(133, *ylim, linestyle=\"dotted\", color=\"C0\")\nax.vlines(169, *ylim, linestyle=\"dotted\", color=\"C1\")\nax.set_xlabel(\"Days since start of pandemic\")\nax.set_ylabel(\"Total reads matching virus\")\nax.text(0, 55, \"Detection threshold\", color=\"grey\")\nax.text(131, 1.1, \"Detection\\nin airport\", color=\"C0\", ha=\"right\")\nax.text(171, 1.1, \"Detection\\nin WWTP\", color=\"C1\")\nfor spine in ['top', 'right']:\n    ax.spines[spine].set_visible(False)\nplt.show()\n\n\n\n\n\ntest"
  },
  {
    "objectID": "flights.html",
    "href": "flights.html",
    "title": "Flights",
    "section": "",
    "text": "For a demonstration of a line plot on a polar axis, see FigureÂ 1.\n\n\nCode\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef integral_global(t, r, n):\n    return (np.exp(r * t) - 1) / (n * r)\n\ndef integral_local(t, r, n, f):\n    return integral_global(t, r, n) - integral_global(t, r - f, n)\n\n\n\n\nCode\nrs = [1 / 250, 1 / 800]\nfs = [1 / 300, 1 / 300]\nn = 10\nt_max = 3200\nt = np.linspace(1, t_max, t_max)\nfig, axes = plt.subplots(1, len(rs), sharey=True)\nfor r, f, ax in zip(rs, fs, axes):\n    ax.semilogy(t, integral_global(t, r, n))\n    ax.semilogy(t, integral_local(t, r, n, f))\naxes[0].set_ylim([1, 1e4])\nplt.show()\n\n\n\n\n\nFigureÂ 1: test\n\n\n\n\n\n\nCode\nr = 1 / 60\nf = 1 / 150\nn = 10\nt_max = 300\nt = np.linspace(1, t_max, t_max)\nfig = plt.figure(figsize=(5,5))\nax = fig.add_subplot()\nax.semilogy(t, integral_global(t, r, n), label=\"Airport\")\nax.semilogy(t, integral_local(t, r, n, f), label=\"WWTP\")\nax.legend(frameon=False)\nylim = [1, 1e3]\nax.set_ylim(ylim)\nax.hlines([50], 0, 300, linestyle=\"dashed\", color=\"grey\")\nax.vlines(133, *ylim, linestyle=\"dotted\", color=\"C0\")\nax.vlines(169, *ylim, linestyle=\"dotted\", color=\"C1\")\nax.set_xlabel(\"Days since start of pandemic\")\nax.set_ylabel(\"Total reads matching virus\")\nax.text(0, 55, \"Detection threshold\", color=\"grey\")\nax.text(131, 1.1, \"Detection\\nin airport\", color=\"C0\", ha=\"right\")\n# ax.text(270, 600, \"Airport reads\", color=\"C0\", ha=\"right\")\nax.text(171, 1.1, \"Detection\\nin WWTP\", color=\"C1\")\n# ax.text(215, 100, \"WWTP reads\", color=\"C1\")\nfor spine in ['top', 'right']:\n    ax.spines[spine].set_visible(False)\nplt.show()\n\n\n\n\n\nFigureÂ 2: test\n\n\n\n\n\n\nCode\nr = 0.259\nf = 1 / 300\nn = 1e8\nt_max = 300\nt = np.linspace(1, t_max, t_max)\nfig = plt.figure(figsize=(5,5))\nax = fig.add_subplot()\nax.semilogy(t, integral_global(t, r, n), label=\"Airport\")\nax.semilogy(t, integral_local(t, r, n, f), label=\"WWTP\")\nax.legend(frameon=False)\n# ylim = [1, 1e3]\n# ax.set_ylim(ylim)\nax.hlines([50], 0, 300, linestyle=\"dashed\", color=\"grey\")\nax.vlines(133, *ylim, linestyle=\"dotted\", color=\"C0\")\nax.vlines(169, *ylim, linestyle=\"dotted\", color=\"C1\")\nax.set_xlabel(\"Days since start of pandemic\")\nax.set_ylabel(\"Total reads matching virus\")\nax.text(0, 55, \"Detection threshold\", color=\"grey\")\nax.text(131, 1.1, \"Detection\\nin airport\", color=\"C0\", ha=\"right\")\nax.text(171, 1.1, \"Detection\\nin WWTP\", color=\"C1\")\nfor spine in ['top', 'right']:\n    ax.spines[spine].set_visible(False)\nplt.show()\n\n\n\n\n\ntest"
  },
  {
    "objectID": "scratch/Untitled.html",
    "href": "scratch/Untitled.html",
    "title": "",
    "section": "",
    "text": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.integrate import odeint\n\n\n\ndef func(y, t, m, r):\n    A = np.array([[r - m, 0], [m, r]])\n    return np.dot(A, y)\n\n\nt = np.arange(0, 100, 0.01)\n\nN = 1e6\nM = 1e4\nr = 0.1\ny_0 = np.array([1/N, 0])\nsoln = odeint(func, y_0, t, args=(M / N, r))\n\n\nplt.semilogy(t, soln)\n\n\n\n\n\nplt.plot(N * soln[soln[:,1] &gt; 1 / N, 0], N * soln[soln[:,1] &gt; 1 / N, 1])\n\n\n\n\n\nplt.plot(N * soln[soln[:,1] &gt; 1 / N, 0], soln[soln[:,1] &gt; 1 / N, 1] / soln[soln[:,1] &gt; 1 / N, 0])"
  },
  {
    "objectID": "CombiningData-2023-07-27.html",
    "href": "CombiningData-2023-07-27.html",
    "title": "The part weâ€™re using",
    "section": "",
    "text": "def posterior_seq_only(p_eg, p_neg, p_eng, p_neng, p_s_e, p_s_ne):\n    return (p_s_e * p_eg) / (\n        p_s_e * p_eg + \n        p_s_ne * p_neg +\n        p_s_e * p_eng +\n        p_s_ne * p_neng\n    )\n\ndef posterior_growth_only(p_eg, p_neg, p_eng, p_neng, p_c_g, p_c_ng):\n    return (p_c_g * p_eg) / (\n        p_c_g * p_eg + \n        p_c_g * p_neg +\n        p_c_ng * p_eng +\n        p_c_ng * p_neng\n    )\n\ndef posterior_combined(p_eg, p_neg, p_eng, p_neng, p_s_e, p_s_ne, p_c_g, p_c_ng):\n    return (p_s_e * p_c_g * p_eg) / (\n        p_s_e * p_c_g * p_eg + \n        p_s_ne * p_c_g * p_neg +\n        p_s_e * p_c_ng * p_eng +\n        p_s_ne * p_c_ng * p_neng\n    )\n\nE = engineered NE = not engineered G = growing NG = not growing\nData: S = sequence is flagged C = count data is flagged\nWant posterior Pr{E, G| S} or Pr{E, G | S, C}.\nLikelihood Pr{S, C | E, G} = Pr{S | E, G} * Pr{C | E, G} = Pr{S | E} * Pr{C | G}\nLikelihood ratios: Pr{S | E} / Pr{S | NE} Pr{C | G} / Pr{C | NG}\nPrior\n\nsequences = 1e5\nthreats = 0.1\ngrowing = 1e4\n\np_eg = threats / sequences\n# Assumes anything engineered is growing\np_eng = 0.0\np_neg = (growing - threats) / sequences\np_neng = 1 - p_eg - p_eng - p_neg\n\nLikelihood\n\np_s_e = 0.9\np_s_ne = 0.2\nprint(p_s_e / p_s_ne)\np_c_g = 0.90\np_c_ng = 0.10\nprint(p_c_g / p_c_ng)\np_seq_only = posterior_seq_only(p_eg, p_neg, p_eng, p_neng, p_s_e, p_s_ne)\np_growth_only = posterior_growth_only(p_eg, p_neg, p_eng, p_neng, p_c_g, p_c_ng)\np_combined = posterior_combined(p_eg, p_neg, p_eng, p_neng, p_s_e, p_s_ne, p_c_g, p_c_ng)\nprint(p_seq_only)\nprint(p_growth_only)\nprint(p_combined)\n\n4.5\n9.0\n4.499984250055124e-06\n4.9999999999999996e-06\n2.24996062568905e-05\n\n\n\np_s_e = 0.9\np_s_ne = 0.05\nposterior_seq_only(p_eg, p_neg, p_eng, p_neng, p_s_e, p_s_ne)\n\n1.7999694005201907e-05\n\n\nBase rates (assume the threat is growing):\n\nsequences = 1e6\nthreats = 1\ngrowing = 1e4\n\nLikelihoods of the Sequence-based test:\n\n# Pr{S|E}\np_s_e = 0.99\n# Pr{S|NE}\np_s_ne = 0.1\n\nFalse and true positives of Sequence-based test alone:\n\n# Number flagged not threats\nprint(p_s_ne * (sequences - threats))\n# Number flagged that are threats\nprint(p_s_e * (threats))\n\n99999.90000000001\n0.99\n\n\nLikelihoods of the Count-based test:\n\n# Pr{C|G}\np_c_g = 0.95\n# Pr{C|NG}\np_c_ng = 0.05\n\n\n# Number flagged not threats\nprint(p_c_g * (growing - threats))\nprint(p_c_ng * (sequences - growing))\n# Number flagged that are threats\nprint(p_c_g * threats)\n\n9499.05\n49500.0\n0.95\n\n\nCombined test (assumes flagging by the two tests is independent conditional on (E, G))\n\n# Number flagged not threats\nprint(p_s_ne * p_c_g * (growing - threats) + p_s_ne * p_c_ng * (sequences - growing))\n# Number flagged threats\nprint(p_s_e * p_c_g * threats)\n\n5899.905000000001\n0.9405"
  }
]