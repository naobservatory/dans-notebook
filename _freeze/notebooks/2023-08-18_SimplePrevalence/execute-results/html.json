{
  "hash": "21cd9c356b1c20884bb5708844474ae8",
  "result": {
    "markdown": "---\ntitle: Simple deterministic model of local and global prevalence\nauthor: Dan Rice\ndate: '2023-08-16'\nformat:\n  html:\n    code-fold: true\n---\n\nThis is building on [Mike's notes](https://hackmd.io/@GWA1lIY4QrqBPa5efs7FEg/HJQM2T7hn).\nThe objective is to have a very simple deterministic model of an exponentially-growing virus spreading from somewhere else in the world to a monitored city.\nThe main difference from Mike's notes is that our flight model conserves the number of people who are infected.\n\nSome assumptions:\n\n* We can ignore noise in the number of cases.\n* The virus is rare enough that the number of cases grows exponentially without saturating.\n* We can ignore structure in the population other than focal-city vs. not-focal-city.\n\n## Dynamics\n\nWe'll use the variable $P$ to be the absolute prevalence, i.e. the raw number of people infected, and $p$ to be the relative prevalence, i.e., the fraction of a given population that is infected.\nThe subscript $l$ refers to the *local* population of the monitored city and $nl$ refers to the *non-local* population.\nWe use the subscript $g$ to refer to the *total*.\nSo $P_{g}$ is the total number of people currently infected.\n\nParameters:\n\n* $r$, the exponential growth rate per day of the virus\n* $f_{in}$, the rate per person per day of flying to the focal city\n* $f_{out}$, the rate per person per day of flying out of the focal city\n* $N_l$, $N_{nl}$, $N_g$, the local, non-local and global population sizes\n\nOur model is a pair of ODEs (dots represent time derivatives):\n\n$$\n\\dot{P}_{nl} = (r - f_{in}) P_{nl} + f_{out} P_l\n$$\n\n$$\n\\dot{P}_{l} = f_{in} P_{nl} + (r - f_{out}) P_l\n$$\n\nwith initial conditions $P_{nl}(0) = 1$ and $P_{l}(0) = 0$.\n\n(An aside about the initial conditions. While it's reasonable to model a virus that starts by infecting one individual, it is not accurate to extend the deterministic model to the earliest stages of the pandemic.\nIn particular, the early stages will be both noisy and superexponential because conditional on not going extinct the prevalence has to grow quickly to get away from the zero bound.\nIn the medium-term -- after stochastic effects dominate and before saturation sets in -- the prevalence will grow approximately exponentially.\nYou can think of this model as extrapolating that regime backwards in time to an \"effective time zero\".\nOne thing to check is whether this causes any problems for the local dynamics.)\n\nNote that our flight model conserves the total prevalence: the rate of infected individuals flying from global to local is exactly equal to the reverse rate.\nThus, we have exponential growth of the global prevalence:\n\n$$\nP_{g} \\equiv P_{nl} + P_{l}\n$$\n\n$$\n\\dot{P}_{g} = r P_{g}\n$$\n\nWe have found one eigenvector of the system of ODEs.\nThe other takes on a natural meaning if we make a further assumption about the rates of flights.\nWe assume that the rate of flying to the focal city is proportional to its size.\nIn particular, we set $N_{nl} f_{in} = N_l f_{out}$.\nWith this assumption, some algebra shows that the second eigenvector is the difference between the non-local and local prevalence:\n\n$$\n\\Delta p \\equiv p_{nl} - p_l\n$$\n\n$$\n\\dot{\\Delta p} = (r - F) \\Delta p\n$$\n\nwhere $F \\equiv f_{in} + f_{out}$.\nNote that if $N_{l} \\ll N_{nl}$ then $F \\approx f_{out}$, the rate at which people fly from the focal city every day.\n\nThis equation shows that there are two regimes:\n\n1. In the slow-growth regime: $r < F$, $\\Delta p$ shrinks exponentially at rate $F - r$. Mixing via air travel closes the gap between the local and non-local prevalence.\n2. In the fast-growth regime: $r > F$, $\\Delta p$ *grows* exponentially at rate $r - F$. The local prevalence will never catch up with the non-local prevalence until saturation effects slow the non-local spread (which is outside the scope of this model).\n\nIn the slow-growth regime, there's no intrinsic advantage to monitoring air travelers (aside from whatever sample properties like fewer non-human contributions to the wastewater) because the virus gets established locally before it reaches high prevalence globally.\nOf course this conclusion depends on our simple model: having a more detailed model of the flight network may suggest that there are particular places it would be good to monitor.\nAlso, stochastic effects may matter a lot in this regime, because it relies on establishment of the virus locally from a small number of introductions.\n\nIn the fast-growth regime, there may be a significant advantage to monitoring air travelers if it's possible to catch the virus while it's in it's exponential phase globally.\nWe would need a non-linear model with saturation effects (e.g. Charlie's) to estimate the advantage if we can't catch it while it's growing exponentially.\n\n## Monitoring in the fast-growth regime\n\nCharlie estimates that $F \\approx 1 / 300$ (a person flies on average once every 300 days).\n[This paper](https://academic.oup.com/jid/article/222/10/1601/5879762) says that the doubling time of SARS-CoV-2 in the US before mitigation efforts was 2.68 days ($r = 0.26$).\nThus, for a covid-like spread, we might expect $r / F \\sim 80$.\nIn this section, we consider monitoring for such a pathogen in the fast-growth regime where $r \\gg F$.\n\nSolving our differential equations, we have:\n\n$$\np_g = \\frac{1}{N_g} e^{rt}\n$$\n\n$$\np_l = \\frac{1}{N_l} \\frac{f_{in}}{F} \\left( 1 - e^{-Ft} \\right) e^{r t}\n    \\approx \\frac{1}{N_g} \\left( 1 - e^{-Ft} \\right) e^{r t}\n$$\n\nThe global population is 8 billion people, so we can get a crude upper bound on the time our model will be valid for by solving for when exponential growth would infect everyone:\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\ndoubling_time = 2.68\nr = np.log(2) / doubling_time\nn_g = 8e9\nsaturation_time = np.log(n_g) / r\nprint(f\"Saturation time: {saturation_time:0.2f} days\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSaturation time: 88.16 days\n```\n:::\n:::\n\n\nThis is several times shorter than the mixing time $1 / F$, so it's safe to simplify our equation to:\n\n$$\np_l \\approx \\frac{1}{N_g} Ft e^{r t}\n$$\n\nSo in short times the ratio\n$$\n\\frac{p_l}{p_g} \\approx Ft\n$$\n\n### Cumulative reads\n\nWe assume that the cumulative reads are proportional to the time integral of the prevalence:\n\n$$\n\\int_0^t p_g dt = \\frac{1}{rN_g} (e^{rt} - 1) \\approx \\frac{1}{rN_g} e^{rt}\n$$\n\n$$\n\\int_0^t p_l dt = \\frac{F}{r^2N_g} \\left(e^{rt} (rt - 1) + 1\\right)\n\\approx \\frac{1}{rN_g} Ft e^{rt}\n$$\n\nTo be continued...\n\n## Scratch (disregard)\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef integral_global(t, r, n):\n    return (np.exp(r * t) - 1) / (n * r)\n\ndef integral_local(t, r, n, f):\n    return integral_global(t, r, n) - integral_global(t, r - f, n)\n```\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nrs = [1 / 250, 1 / 800]\nfs = [1 / 300, 1 / 300]\nn = 10\nt_max = 3200\nt = np.linspace(1, t_max, t_max)\nfig, axes = plt.subplots(1, len(rs), sharey=True)\nfor r, f, ax in zip(rs, fs, axes):\n    ax.semilogy(t, integral_global(t, r, n))\n    ax.semilogy(t, integral_local(t, r, n, f))\naxes[0].set_ylim([1, 1e4])\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![test](2023-08-18_SimplePrevalence_files/figure-html/fig-polar-output-1.png){#fig-polar width=573 height=417}\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nr = 1 / 60\nf = 1 / 150\nn = 10\nt_max = 300\nt = np.linspace(1, t_max, t_max)\nfig = plt.figure(figsize=(5,5))\nax = fig.add_subplot()\nax.semilogy(t, integral_global(t, r, n), label=\"Airport\")\nax.semilogy(t, integral_local(t, r, n, f), label=\"WWTP\")\nax.legend(frameon=False)\nylim = [1, 1e3]\nax.set_ylim(ylim)\nax.hlines([50], 0, 300, linestyle=\"dashed\", color=\"grey\")\nax.vlines(133, *ylim, linestyle=\"dotted\", color=\"C0\")\nax.vlines(169, *ylim, linestyle=\"dotted\", color=\"C1\")\nax.set_xlabel(\"Days since start of pandemic\")\nax.set_ylabel(\"Total reads matching virus\")\nax.text(0, 55, \"Detection threshold\", color=\"grey\")\nax.text(131, 1.1, \"Detection\\nin airport\", color=\"C0\", ha=\"right\")\n# ax.text(270, 600, \"Airport reads\", color=\"C0\", ha=\"right\")\nax.text(171, 1.1, \"Detection\\nin WWTP\", color=\"C1\")\n# ax.text(215, 100, \"WWTP reads\", color=\"C1\")\nfor spine in ['top', 'right']:\n    ax.spines[spine].set_visible(False)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![test](2023-08-18_SimplePrevalence_files/figure-html/fig-test-output-1.png){#fig-test width=442 height=435}\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nr = 0.259\nf = 1 / 300\nn = 1e8\nt_max = 300\nt = np.linspace(1, t_max, t_max)\nfig = plt.figure(figsize=(5,5))\nax = fig.add_subplot()\nax.semilogy(t, integral_global(t, r, n), label=\"Airport\")\nax.semilogy(t, integral_local(t, r, n, f), label=\"WWTP\")\nax.legend(frameon=False)\n# ylim = [1, 1e3]\n# ax.set_ylim(ylim)\nax.hlines([50], 0, 300, linestyle=\"dashed\", color=\"grey\")\nax.vlines(133, *ylim, linestyle=\"dotted\", color=\"C0\")\nax.vlines(169, *ylim, linestyle=\"dotted\", color=\"C1\")\nax.set_xlabel(\"Days since start of pandemic\")\nax.set_ylabel(\"Total reads matching virus\")\nax.text(0, 55, \"Detection threshold\", color=\"grey\")\nax.text(131, 1.1, \"Detection\\nin airport\", color=\"C0\", ha=\"right\")\nax.text(171, 1.1, \"Detection\\nin WWTP\", color=\"C1\")\nfor spine in ['top', 'right']:\n    ax.spines[spine].set_visible(False)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![test](2023-08-18_SimplePrevalence_files/figure-html/cell-6-output-1.png){width=450 height=429}\n:::\n:::\n\n\n",
    "supporting": [
      "2023-08-18_SimplePrevalence_files"
    ],
    "filters": [],
    "includes": {}
  }
}
