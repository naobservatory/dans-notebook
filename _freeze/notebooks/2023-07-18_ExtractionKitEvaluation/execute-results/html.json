{
  "hash": "2cce4a3219fad2cc8b643c58e51fd0b1",
  "result": {
    "markdown": "---\ntitle: \"Examine extraction-kit comparison experiment\"\nauthor: \"Dan Rice\"\ndate: \"2023-09-18\"\n---\n\n\n# Background\n\n[Drive folder](https://drive.google.com/drive/folders/1HiqKmpoS34gTtL5MQ3WYiochFiRqut7L)\n\n\n# Setup\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\n# library(googlesheets4)\nlibrary(fs)\nlibrary(here)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nhere() starts at /Users/dan/notebook\n```\n:::\n\n```{.r .cell-code}\nlibrary(knitr)\nlibrary(broom)\n\n# plotting libraries\nlibrary(cowplot)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'cowplot'\n\nThe following object is masked from 'package:lubridate':\n\n    stamp\n```\n:::\n\n```{.r .cell-code}\nlibrary(patchwork)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'patchwork'\n\nThe following object is masked from 'package:cowplot':\n\n    align_plots\n```\n:::\n\n```{.r .cell-code}\nlibrary(ggbeeswarm)\n\n# Custon qPCR helpers\nlibrary(naowetlab)\n# source('_functions.R')\n\n# Plotting setup #\n\ntheme_set(theme_cowplot())\n\n# Okabe Ito color scheme with amber for yellow; see https://easystats.github.io/see/reference/scale_color_okabeito.html\ncolors_oi <- grDevices::palette.colors()\ncolors_oi[\"yellow\"] <- \"#F5C710\"\n```\n:::\n\n\n# Data import\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_path <- here(\"_data/2023-07-18-extraction-kit-evaluation\")\n```\n:::\n\n\n## metadata\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmeta_samples <- path(data_path, \"qpcr\", \"meta_samples.csv\") %>%\n  read_csv() %>%\n  rename(sample_qpcr = sample_qPCR) %>%\n  janitor::clean_names() %>%\n  glimpse()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 27 Columns: 8\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (7): sample_qPCR, Kit, treatment_group, LPA, other_treatment, Virus_spec...\ndbl (1): group\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 27\nColumns: 8\n$ sample_qpcr     <chr> \"1_ZR_A\", \"1_ZR_B\", \"1_ZR_C\", \"2_ZDR_A\", \"2_ZDR_B\", \"2…\n$ kit             <chr> \"Zymo RNA\", \"Zymo RNA\", \"Zymo RNA\", \"Zymo RNA/DNA\", \"Z…\n$ treatment_group <chr> \"ZQ-RNA\", \"ZQ-RNA\", \"ZQ-RNA\", \"ZQ-RNADNA\", \"ZQ-RNADNA\"…\n$ lpa             <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", …\n$ group           <dbl> 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ other_treatment <chr> \"Shield\", \"Shield\", \"Shield\", \"Shield\", \"Shield\", \"Shi…\n$ virus_specific  <chr> \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"No\", \"No\", …\n$ fp_data         <chr> \"No\", \"Yes\", \"No\", \"No\", \"Yes\", \"No\", \"No\", \"Yes\", \"No…\n```\n:::\n\n```{.r .cell-code}\nmeta_targets <- path(data_path, \"qpcr\", \"meta_target.csv\") %>%\n  read_csv() %>%\n  rename(target_qpcr = target_qPCR) %>%\n  janitor::clean_names() %>%\n  glimpse()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 5 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): target_qPCR, target\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 5\nColumns: 2\n$ target_qpcr <chr> \"CrA\", \"Cov2\", \"Noro\", \"16S\", \"Phg\"\n$ target      <chr> \"Crassphage\", \"SARS-CoV-2\", \"Norovirus\", \"bacteria\", \"phag…\n```\n:::\n:::\n\n\n## qPCR\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfns <- data_path %>%\n  dir_ls(recurse = TRUE, glob = \"*_Standard Curve Result_*.csv\")\nfns %>% path_file()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2023-07-26_Cov2-kits_Standard Curve Result_20230728 133121.csv\"    \n[2] \"2023-07-26_CrA-kits_Standard Curve Result_20230728 135806.csv\"     \n[3] \"2023-07-26_Noro_kits_Standard Curve Result_20230728 140336.csv\"    \n[4] \"2023-07-26_Phagemid-kits_Standard Curve Result_20230728 141050.csv\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nresults_raw <- tibble(file = fns) %>%\n  mutate(\n    .keep = \"unused\",\n    data = map(file, read_qpcr_results_csv)\n  ) %>%\n  unnest(data)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nresults <- results_raw %>%\n  rename(target_qpcr = target) %>%\n  left_join(meta_samples, by = c(\"sample\" = \"sample_qpcr\")) %>%\n  left_join(meta_targets, by = \"target_qpcr\") %>%\n  mutate()\n```\n:::\n\n\n### amp curves\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfns_amp <- data_path %>%\n  dir_ls(recurse = TRUE, glob = \"*_Amplification Data_*.csv\") %>%\n  str_subset(negate = TRUE, \"Raw\")\n\namp1 <- tibble(file = fns_amp) %>%\n  mutate(\n    .keep = \"unused\",\n    data = map(file, read_qpcr_amplification_csv)\n  ) %>%\n  unnest(data) %>%\n  rename(target_qpcr = target) %>%\n  left_join(results)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nJoining with `by = join_by(well, well_position, row, column, target_qpcr,\nsample, omit)`\n```\n:::\n:::\n\n\n### Second experiment\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_path2 <- here(\"_data/2023-07-13-volume-and-dilution\")\n\nmeta_samples2 <- path(data_path2, \"qpcr\", \"meta_samples.csv\") %>%\n  read_csv() %>%\n  rename(sample_qpcr = sample_qPCR) %>%\n  janitor::clean_names()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 6 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): sample_qPCR, treatment_group\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nmeta_targets2 <- path(data_path2, \"qpcr\", \"meta_target.csv\") %>%\n  read_csv() %>%\n  rename(target_qpcr = target_qPCR) %>%\n  janitor::clean_names()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 4 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): target_qPCR, target\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nfns2 <- data_path2 %>%\n  dir_ls(recurse = TRUE, glob = \"*_Standard Curve Result_*.csv\")\nfns2 %>% path_file()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2023-07-20_SSTweenCovNoro_Standard Curve Result_20230724 143043.csv\"\n[2] \"2023-07-20_TweenCrA16S_Standard Curve Result_20230724 142856.csv\"   \n```\n:::\n\n```{.r .cell-code}\nresults_raw2 <- tibble(file = fns2) %>%\n  mutate(\n    .keep = \"unused\",\n    data = map(file, read_qpcr_results_csv)\n  ) %>%\n  unnest(data)\n\nresults2 <- results_raw2 %>%\n  rename(target_qpcr = target) %>%\n  left_join(meta_samples2, by = c(\"sample\" = \"sample_qpcr\")) %>%\n  left_join(meta_targets2, by = \"target_qpcr\") %>%\n  mutate()\n\nfns_amp2 <- data_path2 %>%\n  dir_ls(recurse = TRUE, glob = \"*_Amplification Data_*.csv\") %>%\n  str_subset(negate = TRUE, \"Raw\")\n\namp2 <- tibble(file = fns_amp2) %>%\n  mutate(\n    .keep = \"unused\",\n    data = map(file, read_qpcr_amplification_csv)\n  ) %>%\n  unnest(data) %>%\n  rename(target_qpcr = target) %>%\n  left_join(results2)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nJoining with `by = join_by(well, well_position, row, column, target_qpcr,\nsample, omit)`\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_path3 <- here(\"_data/2023-06-13-concentration\")\n\nmeta_samples3 <- path(data_path3, \"qpcr\", \"meta_samples.csv\") %>%\n  read_csv() %>%\n  mutate(treatment_group = as.character(treatment_group)) %>%\n  # rename(sample_qpcr = sample_qPCR) %>%\n  janitor::clean_names()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 12 Columns: 9\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): sample_qpcr, filter, sewer_system, method, method_short\ndbl (4): treatment_group, sample_number, volume, amicon_mwco\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nmeta_targets3 <- path(data_path3, \"qpcr\", \"meta_target.csv\") %>%\n  read_csv() %>%\n  rename(target_qpcr = target_qPCR) %>%\n  janitor::clean_names()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 5 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): target_qPCR, target\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nfns3 <- data_path3 %>%\n  dir_ls(recurse = TRUE, glob = \"*_Standard Curve Result_*.csv\")\nfns3 %>% path_file()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2023-06-23_CPAmicon_16S_Standard Curve Result_20230625 111656.csv\"    \n[2] \"2023-06-23_AmiconCP-COVNORO_Standard Curve Result_20230623 171728.csv\"\n[3] \"2023-06-23_CrAPhg_Standard Curve Result_20230623 171458.csv\"          \n```\n:::\n\n```{.r .cell-code}\nresults_raw3 <- tibble(file = fns3) %>%\n  mutate(\n    .keep = \"unused\",\n    data = map(file, read_qpcr_results_csv)\n  ) %>%\n  unnest(data)\nprint(unique(results_raw3$sample))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"N_30\"               \"N_0.05-80\"          \"6840.0\"            \n [4] \"N_100\"              \"N_Ultra-80\"         \"684.0\"             \n [7] \"N_0.05\"             \"S_0.05-80\"          \"68.4\"              \n[10] \"N_Ultra\"            \"S_Ultra-80\"         \"6.840000000000001\" \n[13] \"S_30\"               NA                   \"0.6840000000000002\"\n[16] \"S_100\"              \"S_0.05\"             \"S_Ultra\"           \n[19] \"10.0\"               \"100000.0\"           \"10000.0\"           \n[22] \"1000.0\"             \"100.0\"             \n```\n:::\n\n```{.r .cell-code}\nprint(unique(results_raw3$target))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"16S\"  \"Cov2\" \"Noro\" \"CrA\"  \"phg\" \n```\n:::\n\n```{.r .cell-code}\nresults3 <- results_raw3 %>%\n  rename(target_qpcr = target) %>%\n  left_join(meta_samples3, by = c(\"sample\" = \"sample_qpcr\")) %>%\n  left_join(meta_targets3, by = \"target_qpcr\") %>%\n  mutate()\n\nfns_amp3 <- data_path3 %>%\n  dir_ls(recurse = TRUE, glob = \"*_Amplification Data_*.csv\") %>%\n  str_subset(negate = TRUE, \"Raw\")\n\n\namp3 <- tibble(file = fns_amp3) %>%\n  mutate(\n    .keep = \"unused\",\n    data = map(file, read_qpcr_amplification_csv)\n  ) %>%\n  unnest(data) %>%\n  rename(target_qpcr = target) %>%\n  left_join(results3)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nJoining with `by = join_by(well, well_position, row, column, target_qpcr,\nsample, omit)`\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\namp1$experiment <- 1\namp2$experiment <- 2\namp3$experiment <- 3\namp <- bind_rows(amp1, amp2, amp3)\n# amp <- bind_rows(amp1, amp2)\n```\n:::\n\n\n# Analyze qPCR data\n\n## Inspect SARS2 amplification curves\n\n\n::: {.cell fig.dim='[9,6]'}\n\n```{.r .cell-code}\ndelta_rn_min <- 1e-3\nct_threshold <- results %>%\n  filter(target == \"SARS-CoV-2\") %>%\n  pull(threshold) %>%\n  unique()\nstopifnot(length(ct_threshold) == 1)\n\namp %>%\n  filter(\n    target == \"SARS-CoV-2\",\n    !is.na(treatment_group)\n  ) %>%\n  ggplot(aes(cycle_number, pmax(d_rn, delta_rn_min), color = treatment_group)) +\n  # scale_color_manual(values = colors_oi %>% unname) +\n  scale_y_log10() +\n  geom_line(aes(group = well)) +\n  geom_hline(yintercept = ct_threshold, alpha = 0.3) +\n  facet_wrap(~experiment) +\n  # scale_color_brewer(type = 'qual') +\n  # geom_point(data = baselines, aes(shape = baseline_boundary), size = 3) +\n  # scale_shape_manual(values = c(1, 4)) +\n  labs(y = \"Delta Rn\", x = \"Cycle\", color = \"Target\")\n```\n\n::: {.cell-output-display}\n![](2023-07-18_ExtractionKitEvaluation_files/figure-html/unnamed-chunk-11-1.png){width=864}\n:::\n:::\n\n::: {.cell fig.dim='[9,6]'}\n\n```{.r .cell-code}\namp %>%\n  filter(\n    target == \"SARS-CoV-2\",\n    task %in% c(\"STANDARD\", \"UNKNOWN\")\n  ) %>%\n  ggplot(aes(cycle_number, pmax(d_rn, delta_rn_min), color = treatment_group)) +\n  facet_wrap(~treatment_group) +\n  # scale_color_manual(values = colors_oi %>% unname) +\n  scale_x_continuous(limits = c(25, 40)) +\n  scale_y_log10() +\n  geom_line(aes(group = well)) +\n  geom_hline(yintercept = ct_threshold, alpha = 0.3) +\n  labs(y = \"Delta Rn\", x = \"Cycle\", color = \"Target\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2064 rows containing missing values (`geom_line()`).\n```\n:::\n\n::: {.cell-output-display}\n![](2023-07-18_ExtractionKitEvaluation_files/figure-html/unnamed-chunk-12-1.png){width=864}\n:::\n:::\n\n::: {.cell fig.dim='[9,6]'}\n\n```{.r .cell-code}\namp %>%\n  filter(\n    target == \"SARS-CoV-2\",\n    task == \"STANDARD\"\n  ) %>%\n  ggplot(aes(cycle_number, pmax(d_rn, delta_rn_min), color = sample)) +\n  # scale_color_manual(values = colors_oi %>% unname) +\n  # scale_x_continuous(limits = c(25, 40)) +\n  scale_y_log10() +\n  geom_line(aes(group = well)) +\n  geom_hline(yintercept = ct_threshold, alpha = 0.3) +\n  labs(y = \"Delta Rn\", x = \"Cycle\", color = \"Target\")\n```\n\n::: {.cell-output-display}\n![](2023-07-18_ExtractionKitEvaluation_files/figure-html/unnamed-chunk-13-1.png){width=864}\n:::\n:::\n\n\n### Check SC versus target samples\n\n\n::: {.cell fig.dim='[9,6]'}\n\n```{.r .cell-code}\namp %>%\n  filter(\n    target == \"SARS-CoV-2\",\n    task %in% c(\"STANDARD\", \"UNKNOWN\")\n  ) %>%\n  ggplot(aes(cycle_number, pmax(d_rn, delta_rn_min), color = interaction(task, experiment))) +\n  scale_color_manual(values = colors_oi %>% unname()) +\n  scale_x_continuous(limits = c(15, 40)) +\n  scale_y_log10() +\n  geom_line(aes(group = interaction(well, experiment))) +\n  geom_hline(yintercept = ct_threshold, alpha = 0.3) +\n  labs(y = \"Delta Rn\", x = \"Cycle\", color = \"Target\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 1960 rows containing missing values (`geom_line()`).\n```\n:::\n\n::: {.cell-output-display}\n![](2023-07-18_ExtractionKitEvaluation_files/figure-html/unnamed-chunk-14-1.png){width=864}\n:::\n:::\n\n::: {.cell fig.dim='[9,6]'}\n\n```{.r .cell-code}\namp %>%\n  filter(\n    # target == 'SARS-CoV-2',\n    task %in% c(\"STANDARD\", \"UNKNOWN\")\n  ) %>%\n  ggplot(aes(cycle_number, pmax(d_rn, delta_rn_min), color = interaction(task, experiment))) +\n  facet_wrap(~target) +\n  scale_color_manual(values = colors_oi %>% unname()) +\n  scale_x_continuous(limits = c(15, 40)) +\n  scale_y_log10() +\n  geom_line(aes(group = interaction(well, experiment))) +\n  geom_hline(yintercept = ct_threshold, alpha = 0.3) +\n  labs(y = \"Delta Rn\", x = \"Cycle\", color = \"Target\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 3220 rows containing missing values (`geom_line()`).\n```\n:::\n\n::: {.cell-output-display}\n![](2023-07-18_ExtractionKitEvaluation_files/figure-html/unnamed-chunk-15-1.png){width=864}\n:::\n:::\n",
    "supporting": [
      "2023-07-18_ExtractionKitEvaluation_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
