{
  "hash": "42c98b5ca05c1be9243e078042d44952",
  "result": {
    "markdown": "---\ntitle: \"2023-09-13 PMMoV qPCR Analysis\"\nauthor: \"Dan Rice\"\ndate: 2023-09-25\ntoc: true\nformat:\n  html:\n    code-fold: false\n---\n\n## Objectives\n\nNOTE: Need sample metadata. I don't know what the samples are.\n\n- Test qPCR of PMMoV\n- Test duplexed qPCR\n- See [Google Doc](https://docs.google.com/document/d/1I2nfbLJ1Tdn6ZVpB1IlCTdRf3yLC83hpvgsY2NiXgrg/edit?usp=sharing)\n\n## Preliminary work\n\n- Dan copied the `.eds` file from the `NAO qPCR data` directory to the experiment directory and exported `.csv` files.\n\n## Data import\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr)\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n\n```{.r .cell-code}\nlibrary(purrr)\nlibrary(stringr)\nlibrary(ggplot2)\nlibrary(tidyr)\nlibrary(broom)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_dir <-\n  \"~/airport/[2023-09-13] PMMoV and Multiplex qPCR/\"\nfilename_pattern <- \"Results\"\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncol_types <- list(\n  Target = col_character(),\n  Cq = col_double()\n)\nraw_data <- list.files(\n  paste0(data_dir, \"qpcr\"),\n  pattern = filename_pattern,\n  full.names = TRUE,\n) |>\n  print() |>\n  map(function(f) {\n    read_csv(f,\n      skip = 23,\n      col_types = col_types,\n    )\n  }) |>\n  list_rbind()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"/Users/dan/airport/[2023-09-13] PMMoV and Multiplex qPCR/qpcr/Ari PMMoV_Results_20230925_115306.csv\"\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat <- vroom(...)\n  problems(dat)\n```\n:::\n\n```{.r .cell-code}\nprint(raw_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 63 × 21\n    Well `Well Position` Omit  Sample Target Task    Reporter Quencher\n   <dbl> <chr>           <lgl> <chr>  <chr>  <chr>   <chr>    <chr>   \n 1     1 A1              FALSE 1      PPMoV  UNKNOWN VIC      NFQ-MGB \n 2     2 A2              FALSE 1      PPMoV  UNKNOWN VIC      NFQ-MGB \n 3     3 A3              FALSE 1      PPMoV  UNKNOWN VIC      NFQ-MGB \n 4     5 A5              FALSE 1      N2     UNKNOWN FAM      NFQ-MGB \n 5     6 A6              FALSE 1      N2     UNKNOWN FAM      NFQ-MGB \n 6     8 A8              FALSE NTC    N2     UNKNOWN FAM      NFQ-MGB \n 7    10 A10             FALSE 1      N2     UNKNOWN FAM      NFQ-MGB \n 8    10 A10             FALSE 1      PPMoV  UNKNOWN VIC      NFQ-MGB \n 9    11 A11             FALSE 1      N2     UNKNOWN FAM      NFQ-MGB \n10    11 A11             FALSE 1      PPMoV  UNKNOWN VIC      NFQ-MGB \n# ℹ 53 more rows\n# ℹ 13 more variables: `Amp Status` <chr>, `Amp Score` <dbl>,\n#   `Curve Quality` <lgl>, `Result Quality Issues` <lgl>, Cq <dbl>,\n#   `Cq Confidence` <dbl>, `Cq Mean` <dbl>, `Cq SD` <dbl>,\n#   `Auto Threshold` <lgl>, Threshold <dbl>, `Auto Baseline` <lgl>,\n#   `Baseline Start` <dbl>, `Baseline End` <dbl>\n```\n:::\n:::\n\n\nIt looks like the software splits duplexed targets into two rows, but doesn't save the information about multiplexing.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nraw_data |> count(Target, Reporter, Sample, Quencher)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 19 × 5\n   Target Reporter Sample Quencher     n\n   <chr>  <chr>    <chr>  <chr>    <int>\n 1 N2     FAM      1      NFQ-MGB      5\n 2 N2     FAM      2      NFQ-MGB      5\n 3 N2     FAM      NTC    NFQ-MGB      2\n 4 N2     FAM      SC1    NFQ-MGB      3\n 5 N2     FAM      SC2    NFQ-MGB      3\n 6 N2     FAM      SC3    NFQ-MGB      3\n 7 N2     FAM      SC4    NFQ-MGB      3\n 8 N2     FAM      SC5    NFQ-MGB      3\n 9 N2     FAM      SC6    NFQ-MGB      3\n10 N2     FAM      <NA>   NFQ-MGB      2\n11 PPMoV  VIC      1      NFQ-MGB      6\n12 PPMoV  VIC      2      NFQ-MGB      6\n13 PPMoV  VIC      NTC    NFQ-MGB      4\n14 PPMoV  VIC      SC1    NFQ-MGB      1\n15 PPMoV  VIC      SC2    NFQ-MGB      3\n16 PPMoV  VIC      SC3    NFQ-MGB      3\n17 PPMoV  VIC      SC4    NFQ-MGB      3\n18 PPMoV  VIC      SC5    NFQ-MGB      3\n19 PPMoV  VIC      <NA>   NFQ-MGB      2\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nraw_data |>\n  count(`Well Position`) |>\n  print(n = Inf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 54 × 2\n   `Well Position`     n\n   <chr>           <int>\n 1 A1                  1\n 2 A10                 2\n 3 A11                 2\n 4 A12                 2\n 5 A2                  1\n 6 A3                  1\n 7 A5                  1\n 8 A6                  1\n 9 A8                  1\n10 B1                  1\n11 B10                 2\n12 B11                 2\n13 B12                 2\n14 B2                  1\n15 B3                  1\n16 B5                  1\n17 B6                  1\n18 C1                  1\n19 C10                 2\n20 C11                 2\n21 C12                 2\n22 C2                  1\n23 C3                  1\n24 C5                  1\n25 C6                  1\n26 C7                  1\n27 D3                  1\n28 D5                  1\n29 D6                  1\n30 D7                  1\n31 E1                  1\n32 E2                  1\n33 E3                  1\n34 E5                  1\n35 E6                  1\n36 E7                  1\n37 F1                  1\n38 F2                  1\n39 F3                  1\n40 F5                  1\n41 F6                  1\n42 F7                  1\n43 G1                  1\n44 G2                  1\n45 G3                  1\n46 G5                  1\n47 G6                  1\n48 G7                  1\n49 H1                  1\n50 H2                  1\n51 H3                  1\n52 H5                  1\n53 H6                  1\n54 H7                  1\n```\n:::\n:::\n\n\nWe can count the multiplexing and save it as a column:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwith_counts <- raw_data |>\n  left_join(count(raw_data, Well, name = \"n_multiplex\"), by = join_by(Well))\n```\n:::\n\n\nIt looks like the multiplexed wells didn't amplifiy well.\nNo N2 wells amplified. It also looks like there was poor amp in general.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwith_counts |>\n  count(Target, Reporter, Sample, n_multiplex, `Amp Status`) |>\n  print(n = Inf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 32 × 6\n   Target Reporter Sample n_multiplex `Amp Status`     n\n   <chr>  <chr>    <chr>        <int> <chr>        <int>\n 1 N2     FAM      1                1 AMP              1\n 2 N2     FAM      1                1 NO_AMP           1\n 3 N2     FAM      1                2 NO_AMP           3\n 4 N2     FAM      2                1 NO_AMP           2\n 5 N2     FAM      2                2 NO_AMP           3\n 6 N2     FAM      NTC              1 NO_AMP           1\n 7 N2     FAM      NTC              2 NO_AMP           1\n 8 N2     FAM      SC1              1 AMP              1\n 9 N2     FAM      SC1              1 NO_AMP           2\n10 N2     FAM      SC2              1 AMP              2\n11 N2     FAM      SC2              1 NO_AMP           1\n12 N2     FAM      SC3              1 AMP              2\n13 N2     FAM      SC3              1 NO_AMP           1\n14 N2     FAM      SC4              1 AMP              2\n15 N2     FAM      SC4              1 NO_AMP           1\n16 N2     FAM      SC5              1 AMP              2\n17 N2     FAM      SC5              1 NO_AMP           1\n18 N2     FAM      SC6              1 AMP              1\n19 N2     FAM      SC6              1 NO_AMP           2\n20 N2     FAM      <NA>             2 NO_AMP           2\n21 PPMoV  VIC      1                1 AMP              3\n22 PPMoV  VIC      1                2 AMP              3\n23 PPMoV  VIC      2                1 AMP              3\n24 PPMoV  VIC      2                2 AMP              3\n25 PPMoV  VIC      NTC              1 NO_AMP           3\n26 PPMoV  VIC      NTC              2 NO_AMP           1\n27 PPMoV  VIC      SC1              1 AMP              1\n28 PPMoV  VIC      SC2              1 AMP              3\n29 PPMoV  VIC      SC3              1 AMP              3\n30 PPMoV  VIC      SC4              1 AMP              3\n31 PPMoV  VIC      SC5              1 AMP              3\n32 PPMoV  VIC      <NA>             2 NO_AMP           2\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwith_counts |>\n  count(Target, n_multiplex, `Amp Status`) |>\n  print(n = Inf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 7 × 4\n  Target n_multiplex `Amp Status`     n\n  <chr>        <int> <chr>        <int>\n1 N2               1 AMP             11\n2 N2               1 NO_AMP          12\n3 N2               2 NO_AMP           9\n4 PPMoV            1 AMP             19\n5 PPMoV            1 NO_AMP           3\n6 PPMoV            2 AMP              6\n7 PPMoV            2 NO_AMP           3\n```\n:::\n:::\n\n\nCheck that the thresholds are the same for every well with the same target\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwith_counts |>\n  count(Target, Threshold) |>\n  print(n = Inf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 3\n  Target Threshold     n\n  <chr>      <dbl> <int>\n1 N2          5.82    32\n2 PPMoV       1.53    31\n```\n:::\n:::\n\n\n## Amplification curves\n\n\n::: {.cell}\n\n```{.r .cell-code}\namp_data <- list.files(\n  paste0(data_dir, \"qpcr\"),\n  pattern = \"Amplification Data\",\n  full.names = TRUE,\n) |>\n  map(function(f) {\n    read_csv(f,\n      skip = 23,\n      col_types = col_types,\n    )\n  }) |>\n  list_rbind() |>\n  left_join(with_counts,\n    by = join_by(Well, `Well Position`, Sample, Target)\n  ) |>\n  print()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: The following named parsers don't match the column names: Cq\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2,520 × 26\n    Well `Well Position` `Cycle Number` Target    Rn     dRn Sample Omit.x\n   <dbl> <chr>                    <dbl> <chr>  <dbl>   <dbl> <chr>  <lgl> \n 1     1 A1                           1 PPMoV   13.5 -1.41   1      FALSE \n 2     1 A1                           2 PPMoV   13.8 -1.23   1      FALSE \n 3     1 A1                           3 PPMoV   14.4 -0.752  1      FALSE \n 4     1 A1                           4 PPMoV   14.8 -0.474  1      FALSE \n 5     1 A1                           5 PPMoV   15.2 -0.290  1      FALSE \n 6     1 A1                           6 PPMoV   15.5 -0.0864 1      FALSE \n 7     1 A1                           7 PPMoV   15.8  0.0333 1      FALSE \n 8     1 A1                           8 PPMoV   16.0  0.138  1      FALSE \n 9     1 A1                           9 PPMoV   16.3  0.272  1      FALSE \n10     1 A1                          10 PPMoV   16.5  0.302  1      FALSE \n# ℹ 2,510 more rows\n# ℹ 18 more variables: Omit.y <lgl>, Task <chr>, Reporter <chr>,\n#   Quencher <chr>, `Amp Status` <chr>, `Amp Score` <dbl>,\n#   `Curve Quality` <lgl>, `Result Quality Issues` <lgl>, Cq <dbl>,\n#   `Cq Confidence` <dbl>, `Cq Mean` <dbl>, `Cq SD` <dbl>,\n#   `Auto Threshold` <lgl>, Threshold <dbl>, `Auto Baseline` <lgl>,\n#   `Baseline Start` <dbl>, `Baseline End` <dbl>, n_multiplex <int>\n```\n:::\n:::\n\n\n### Amplification curves by sample\n\nThe one that amplified:\n\n\n::: {.cell}\n\n```{.r .cell-code}\namp_data |>\n  filter(`Amp Status` == \"AMP\") |>\n  ggplot(mapping = aes(\n    x = `Cycle Number`,\n    y = dRn,\n    group = Well,\n    color = as.factor(n_multiplex),\n  )) +\n  geom_line() +\n  geom_line(mapping = aes(\n    x = `Cycle Number`,\n    y = Threshold,\n  )) +\n  scale_y_log10() +\n  facet_grid(\n    rows = vars(Target), cols = vars(Sample), scales = \"free_y\"\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in self$trans$transform(x): NaNs produced\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Transformation introduced infinite values in continuous y-axis\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 169 rows containing missing values (`geom_line()`).\n```\n:::\n\n::: {.cell-output-display}\n![](2023-09-23-pmmov_qpcr_files/figure-html/unnamed-chunk-11-1.png){width=1344}\n:::\n:::\n\n\nThe ones that didn't:\n\n\n::: {.cell}\n\n```{.r .cell-code}\namp_data |>\n  filter(`Amp Status` == \"NO_AMP\") |>\n  ggplot(mapping = aes(\n    x = `Cycle Number`,\n    y = dRn,\n    group = Well,\n    color = as.factor(n_multiplex),\n  )) +\n  geom_line() +\n  geom_line(mapping = aes(\n    x = `Cycle Number`,\n    y = Threshold,\n  )) +\n  scale_y_log10() +\n  facet_grid(\n    rows = vars(Target), cols = vars(Sample), scales = \"free_y\"\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in self$trans$transform(x): NaNs produced\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Transformation introduced infinite values in continuous y-axis\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 187 rows containing missing values (`geom_line()`).\n```\n:::\n\n::: {.cell-output-display}\n![](2023-09-23-pmmov_qpcr_files/figure-html/unnamed-chunk-12-1.png){width=1344}\n:::\n:::\n\n\n### Amplification curves by well\n\n\n::: {.cell}\n\n```{.r .cell-code}\namp_data |>\n  ggplot(mapping = aes(\n    x = `Cycle Number`,\n    y = dRn,\n    color = as.factor(Target),\n  )) +\n  geom_line() +\n  geom_line(mapping = aes(\n    x = `Cycle Number`,\n    y = Threshold\n  )) +\n  geom_vline(aes(xintercept = `Cq`, color = as.factor(Target)),\n    linetype = \"dashed\"\n  ) +\n  scale_y_log10() +\n  facet_wrap(~`Well Position`, scales = \"free\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in self$trans$transform(x): NaNs produced\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Transformation introduced infinite values in continuous y-axis\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 15 rows containing missing values (`geom_line()`).\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 960 rows containing missing values (`geom_vline()`).\n```\n:::\n\n::: {.cell-output-display}\n![](2023-09-23-pmmov_qpcr_files/figure-html/unnamed-chunk-13-1.png){width=1344}\n:::\n:::\n",
    "supporting": [
      "2023-09-23-pmmov_qpcr_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}