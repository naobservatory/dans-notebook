---
title: "2023-09-13 Extraction Experiment 2 qPCR Analysis"
author: "Dan Rice"
date: 2023-09-15
format:
  html:
    code-fold: false
---
## Objectives

Testing the efficacy of RNA extraction kits.
See [experiment google doc](https://docs.google.com/document/d/1Po6eE3LHc9svHC4yfnDak-B-sKa7o1Pc1noFMoSbFSE/edit?usp=sharing).

## Preliminary work

- Olivia put the `.eds` files in `NAO qPCR data/Olivia` on Google Drive and shared the folder with Dan.
- Google Drive for desktop only syncs shared drives, not shared folders in other drives, so Dan figured out a work around. He made a shortcut to the shared folder in his own google drive so it would sync locally.
- Opened up the `.eds` files in Design and Analysis locally and exported to `.csv` and saved those in the airport experiment folder on the main google drive.
- Found a Google Sheet with metadata, downloaded as CSV and added the CSV back to the Google Drive

## Data import

```{r}
library(readr)
library(dplyr)
library(purrr)
library(stringr)
library(ggplot2)
library(tidyr)
```

```{r}
data_dir <- "~/airport/[2023-09-06] Extraction-kit comparison 2: Settled Solids/"
filename_pattern <- "Results"
```

```{r}
col_types <- list(
                  Target=col_character(),
                  Cq=col_double()
                  )
raw_data <- list.files(
                       paste(data_dir, "qpcr", sep=""),
                       pattern = filename_pattern,
                       full.names = TRUE,
                       ) |>
  map(function(f) read_csv(f, skip=23,
                       col_types=col_types,
                       )) |>
  list_rbind()
print(raw_data)
```

```{r}
raw_data
```

```{r}
metadata <- read_csv(paste(data_dir, "[2023-09-11] Extraction Experiment 2 templates and results - sampleMetadata.csv", sep=""))
glimpse(metadata)
```

```{r}
tidy_data <- raw_data |>
  mutate(
    Cq = as.double(Cq),
    replicate = str_extract(Sample, "[A-Z]"),
    Sample_ID = str_split_i(Sample, "/", 1),
    dilution = as.integer(str_split_i(Sample, "/", 2)),
    quantity = as.double(Sample),
  ) |>
  mutate(dilution = replace_na(dilution, 1)) |>
  left_join(
    metadata,
    by=join_by(Sample_ID)
  )
glimpse(tidy_data)
```

## Kit comparison

### With equal Cq axes

```{r}
tidy_data |>
  filter(!is.na(Extraction_kit),
         dilution == 1,
         ) |>
  ggplot(mapping = aes(x=Cq,
                       y=Extraction_kit,
                       color=replicate,
                       )
  ) +
  stat_summary(
    fun.min = min,
    fun.max = max,
    fun = median,
    position = position_dodge(width = 0.2),
    size = 0.2
  ) + 
  facet_wrap(facets = ~Target)
```

### With free Cq axes

```{r}
tidy_data |>
  filter(!is.na(Extraction_kit),
         dilution == 1,
         ) |>
  ggplot(mapping = aes(x=Cq,
                       y=Extraction_kit,
                       color=replicate,
                       )
  ) +
  stat_summary(
    fun.min = min,
    fun.max = max,
    fun = median,
    position = position_dodge(width = 0.2),
    size = 0.2
  ) + 
  facet_wrap(facets = ~Target, scales="free_x")
```

Check that the overlapping points really do have three values

```{r}
tidy_data |>
  filter(!is.na(Extraction_kit), is.na(Cq)) |>
  count(Target, Extraction_kit, Sample_ID, dilution) |>
  print()
```

```{r}
tidy_data |>
    filter(Extraction_kit=="Zymo quick-RNA",
           Target=="CrA", replicate=="A") |>
    print(width=Inf)
```

### Adjusting for elution volume

Assume the amplification efficiency is 100%, so that
an increase in initial concentration by a factor of $x$
decreases $C_q$ by $\log_{2}(x)$.

If a method has elution volume $v$ and we dilute it to total volume $V$,
this reduces its final concentration by a factor $v / V$.
If the final volume is the same across methods, we can put different
methods on the same footing by adding $\log_{2}(v)$ to $C_q$
(so that large elution volumes are penalized with a higher adjusted $C_q$).

```{r}
tidy_data |>
  mutate(elution_adjusted_Cq=Cq + log2(Elution_volume)) |>
  filter(!is.na(Extraction_kit),
         dilution == 1,
         ) |>
  ggplot(mapping = aes(x=elution_adjusted_Cq,
                       y=Extraction_kit,
                       color=replicate,
                       )
  ) +
  stat_summary(
    fun.min = min,
    fun.max = max,
    fun = median,
    position = position_dodge(width = 0.2),
    size = 0.2
  ) + 
  facet_wrap(facets = ~Target, scales="free_x")
```
## Standard curves

```{r}
tidy_data |>
  filter(Task == "STANDARD",
         dilution == 1,
         ) |>
  ggplot(mapping = aes(x=quantity,
                       y=Cq,
                       )
  ) +
  stat_summary(
    fun.min = min,
    fun.max = max,
    fun = median,
    position = position_dodge(width = 0.2),
    size = 0.2
  ) + 
  geom_smooth(method='lm') + 
  scale_x_continuous(trans='log10') + 
  facet_wrap(facets = ~Target, scales="free_x")
```

Not sure what the units of the X-axis are

```{r}
library(broom)
fits <- tibble()
for (target in unique(tidy_data$Target)){
    fit <- lm(Cq ~ log10(quantity),
       data=filter(tidy_data, Task=="STANDARD", Target==target)
    ) |>
    tidy() |>
    mutate(Target=target, efficiency=10^-(1/estimate) - 1)
    fits <- bind_rows(fits, fit)
}
print(fits |> filter(term == "log10(quantity)"))
```
These match the Design & Analysis software.

## Dilution series

```{r}
tidy_data |>
  filter(Task == "UNKNOWN", dilution > 1) |>
  count(Target, Extraction_kit, dilution)
```

```{r}
tidy_data |>
  filter(Task == "UNKNOWN",
         ) |>
  ggplot(mapping = aes(x=dilution,
                       y=Cq,
                       )
  ) +
  geom_point() + 
  geom_smooth(method='lm') + 
  scale_x_continuous(trans='log10') + 
  facet_grid(rows=vars(Extraction_kit), cols=vars(Target))
```

## Amplification curves

## TODO

- ~~Boxplots~~
- There are a few NaNs that show up as missing points and aren't evident in the plot. Will investigate later.
- ~Standard curve data~
- ~Diluted samples~
- Amplification curves
